[tool.poetry]
name = "notify-api"
version = "4.0.0"
description = ""
authors = ["pwei <patrick.wei@gov.bc.ca>"]
license = "Apache 2.0"
readme = "README.md"
packages = [{include = "notify_api", from = "src"}]

[tool.poetry.dependencies]
python = "^3.12"
flask = "^3.0.3"
flask-sqlalchemy = "^3.1.1"
Flask-Cors = "^4.0.1"
flask-migrate = "^4.0.7"
Flask-Pydantic = "^0.12.0"
python-dotenv = "^1.0.1"
gunicorn = "^22.0.0"
pycountry = "^24.6.1"
email-validator= "1.3.1"
phonenumbers = "8.13.39"
notifications-python-client = "7.0.0"
beautifulsoup4 = "4.12.3"
pg8000 = "^1.31.2"
cachecontrol = "^0.14.0"

flask-jwt-oidc = {git = "https://github.com/seeker25/flask-jwt-oidc.git", branch = "main" }
gcp-queue = { git = "https://github.com/bcgov/sbc-connect-common.git", subdirectory = "python/gcp-queue", branch = "main" }
structured-logging = { git = "https://github.com/bcgov/sbc-connect-common.git", subdirectory = "python/structured-logging", branch = "main" }
cloud-sql-python-connector = "^1.16.0"

[tool.poetry.group.test.dependencies]
psycopg2 = "^2.9.9"
pytest = "^8.2.2"
pytest-cov = "^5.0.0"
pytest-mock = "^3.14.0"
requests-mock = "^1.12.1"
faker = "^25.9.2"
freezegun = "^1.5.1"

[tool.poetry.group.dev.dependencies]
ruff = "^0.3.4"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".vscode",
    "dist",
    "htmlcov",
    "venv",
    "migrations",
    "devops",
    ".history"
]

# Same as Black.
line-length = 120
indent-width = 4

# Assume Python 3.12
target-version = "py312"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.lint]
select = [
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "ERA", # flake8-eradicate/eradicate
    "I",   # isort
    "N",   # pep8-naming
    "PIE", # flake8-pie
    "PL",  # pyLint
    "PGH", # pygrep
    "RUF", # ruff checks
    "SIM", # flake8-simplify
    "T20", # flake8-print
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "UP",  # pyupgrade
]
ignore = [
    "B904", # use 'raise ... from err'
    "B905", # use explicit 'strict=' parameter with 'zip()'
    "N999"
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = [
    "ERA", # do not autoremove commented out code
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.isort]
known-first-party = ["notify_api"]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.pytest.ini_options]
minversion = "2.0"
testpaths = [
   "tests",
]
addopts = "--verbose --strict -p no:warnings --cov=src --cov-report html:htmlcov --cov-report xml:coverage.xml"
python_files = [
   "test*.py"
]
norecursedirs = [
   ".git", ".tox", "venv*", "requirements*", "build",
]
log_cli = true
log_cli_level = "INFO"
filterwarnings = [
   "ignore::UserWarning"
]
markers = [
   "slow",
   "serial",
]

[tool.coverage.run]
branch = true
source = [
   "src/notify_api",
]
omit = [
    "wsgi.py",
    "gunicorn_config.py"
]

[tool.coverage.report]
exclude_lines = [
   "pragma: no cover",
   "from",
   "import",
   "def __repr__",
   "if self.debug:",
   "if settings.DEBUG",
   "raise AssertionError",
   "raise NotImplementedError",
   "if 0:",
   'if __name__ == "__main__":',
]

[build-system]
requires = ["poetry-core>=1.5.0"]
build-backend = "poetry.core.masonry.api"